{"pages":[{},{},{}],"posts":[{"title":"Java与设计模式-02职责型模式","slug":"Java与设计模式-02职责型模式","date":"2017-03-27T12:53:58.000Z","updated":"2018-10-05T17:30:24.000Z","comments":true,"path":"2017/03/27/Java与设计模式-02职责型模式/","link":"","permalink":"http://cavenzep.github.io/2017/03/27/Java与设计模式-02职责型模式/","excerpt":"介绍balabala… 单例（Singleton）模式场景单例模式的意图是为了确保一个类有且仅有一个实例，并为它提供一个全局访问点。单例模式通过隐藏构造函数来提供创建对象的唯一入口，从而将类的职责集中在类的单个实例中。","text":"介绍balabala… 单例（Singleton）模式场景单例模式的意图是为了确保一个类有且仅有一个实例，并为它提供一个全局访问点。单例模式通过隐藏构造函数来提供创建对象的唯一入口，从而将类的职责集中在类的单个实例中。 单例模式机制单例模式的机制比其意图更加容易记忆，单例模式下创建单例对象的实际有两种：及时和延时。单例模式的主要意图就是保证其他开发人员不能创建该单例对象的新实例。 单例与线程在多线程环境下实现延时创建单例对象，需要小心处理多线程访问控制。 单例模式实现方式 恶汉式，顾名思义就是JVM一加载就实例化对象； 懒汉式，相较于恶汉式，延迟了对象的实例化时机，在对一次获取实例的时候才实例化对象； 升级版懒汉式，使用volatile加双重锁检测来保证多线程环境下单例模式的安全和性能，示例如下： 1234567891011121314151617public class Singleton &#123; private volatile static Singleton instance = null; private Singleton()&#123;&#125; public static Singleton getInstance()&#123; //先检查实例是否存在，如果不存在才进入下面的同步块 if(instance == null)&#123; //同步块，线程安全的创建实例 synchronized (Singleton.class) &#123; //再次检查实例是否存在，如果不存在才真正的创建实例 if(instance == null)&#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125; 枚举式单例，借助枚举的特殊性来实现的单例模式，示例如下： 12345678910111213public enum Singleton &#123; /** * 定义一个枚举的元素，它就代表了Singleton的一个实例。 */ uniqueInstance; /** * 单例可以有自己的操作 */ public void singletonOperation()&#123; //功能处理 &#125;&#125; 观察者（Observer）模式场景观察者模式的意图是在多个对象之间定义一对多的依赖关系，当一个对象的状态发生改变时，会通知依赖于它的对象，并根据新状态做出相应的反应。 模式角色 抽象主题(AbstractSubject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。 推模型和拉模型在观察者模式中，又分为推模型和拉模型两种方式。 推模型主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。 拉模型主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。 总结Java GUI类库是典型的观察者模式范例。Java类库中java.util包中提供了Observable类和Observer接口，以此来支持观察者模式的设计。 调停者（Mediator）模式场景调停者模式的意图是定义一个对象，封装一组对象的交互，从而降低对象间的耦合度，避免对象间的显示引用，并且可以独立的改变对象的行为。 角色 抽象调停者(Mediator)角色：定义出同事对象到调停者对象的接口，其中主要方法是一个（或多个）事件方法。 具体调停者(ConcreteMediator)角色：实现了抽象调停者所声明的事件方法。具体调停者知晓所有的具体同事类，并负责具体的协调各同事对象的交互关系。 抽象同事类(Colleague)角色：定义出调停者到同事对象的接口。同事对象只知道调停者而不知道其余的同事对象。 具体同事类(ConcreteColleague)角色：所有的具体同事类均从抽象同事类继承而来。实现自己的业务，在需要与其他同事通信的时候，就与持有的调停者通信，调停者会负责与其他的同事交互。 代理（Proxy）模式场景代理模式的意图是提供一个代理或者占位符来控制对目标对象的访问。 静态代理：程序运行之前代理类就存在，代理类是在编码阶段就写好的； 动态代理：程序运行中才生产代理类，代理类由JVM动态生成。 角色 抽象对象角色：声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象。 目标对象角色：定义了代理对象所代表的目标对象。 代理对象角色：代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象。代理对象通常在客户端调用传递给目标对象之前或之后，执行某个操作，而不是单纯地将调用传递给目标对象。 动态代理静态代理中，代理类只能代理一个类，并且这个类实在编码阶段就已经写定的。如果需要改变代理类所代理的目标类，但是在目标类方法执行前后要完成一样的操作（铁打的代理类，流水的被代理类），可以采用动态代理，Java已经为实现动态代理提供了一套比较方便的工具。 java.lang.reflect.Proxy类中可以动态生成代理对象的方法 123456789/** *返回实现了指定接口的对象，调用代理对象的方法会调用 *InvocationHandler的invoke方法 * @param loader 获取代理类所使用的类加载器 * @param interfaces 代理类所要实现的接口 * @param handler 实现了InvocationHandler接口的对象 * @return 代理对象 */public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces, InvocationHandler handler) InvocationHandler接口 12345678910111213/** *每个代理类都有一个关联的InvocationHandler *当代理对象执行一个方法的时候会直接执行invoke方法 */public interface InvocationHandler &#123; /** * @param 调用该方法的代理对象 * @param method 代理对象所调用的方法 * @param args 调用的方法的参数 * @return 调用的方法的返回值 */ public Object invoke(Object proxy, Method method, Object[] args)&#125; 职责链（Chain of Responsibility）模式场景职责链模式的目的是通过给予多个对象处理请求的机会，以解除请求的发送者和接受者间的耦合。 角色 抽象处理者(Handler)角色：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。上图中Handler类的聚合关系给出了具体子类对下家的引用，抽象方法handleRequest()规范了子类处理请求的操作。 具体处理者(ConcreteHandler)角色：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。 享元（Flyweight）模式场景享元模式的意图是通过共享来有效的支持大量细粒度的对象。享元模式可以分成单纯享元模式和复合享元模式。 享元模式的结构享元模式采用一个共享来避免大量拥有相同内容对象的开销。这种开销最常见、最直观的就是内存的损耗。享元对象能做到共享的关键是区分内蕴状态(Internal State)和外蕴状态(External State)。 内蕴状态是存储在享元对象内部的，并且是不会随环境的改变而有所不同。因此，一个享元可以具有内蕴状态并可以共享。 外蕴状态是随环境的改变而改变的、不可以共享的。享元对象的外蕴状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。 单纯享元模式 抽象享元(Flyweight)角色：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。2 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。 享元工厂(FlyweightFactory)角色：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。 复合享元模式 抽象享元(Flyweight)角色：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。 复合享元(ConcreteCompositeFlyweight)角色：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成为多个本身是单纯享元对象的组合。复合享元角色又称作不可共享的享元对象。 享元工厂(FlyweightFactory)角色：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。 总结享元模式的优点在于它大幅度地降低内存中对象的数量。但是，它做到这一点所付出的代价也是很高的： 享元模式使得系统更加复杂。为了使对象可以共享，需要将一些状态外部化，这使得程序的逻辑复杂化。 享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://cavenzep.github.io/categories/读书笔记/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://cavenzep.github.io/tags/Java/"},{"name":"Java与设计模式","slug":"Java与设计模式","permalink":"http://cavenzep.github.io/tags/Java与设计模式/"}]},{"title":"Java与设计模式-01接口型模式","slug":"Java与设计模式-01接口型模式","date":"2017-03-18T14:42:52.000Z","updated":"2018-10-05T17:30:20.000Z","comments":true,"path":"2017/03/18/Java与设计模式-01接口型模式/","link":"","permalink":"http://cavenzep.github.io/2017/03/18/Java与设计模式-01接口型模式/","excerpt":"简介接口与抽象类的区别简要说出三点即可。","text":"简介接口与抽象类的区别简要说出三点即可。 接口与职责Java接口的优势在于它限制了对象之间的协作，这种约束提供了更大的自由。开发人员必须遵守接口的制定的方法契约，又可以为接口方法提供空实现类忽略方法调用。接口的威力在于描述了在类的协作中它所期望和不期望的行为。 适配器（Adapter）模式场景某个类实现了我们所需要的服务，但其方法名与客户端的期望不符，这就需要使用适配器模式来解决。适配器模式分为类适配和对象适配。 类适配类适配，通过继承目标类来实现功能适配。 对象适配对象适配，通过组合目标类来实现功能适配。 缺省适配器上述所说的类适配和对象适配都属于定制适配器，还有一种缺省适配器。缺省适配(Default Adapter)模式为一个接口提供缺省实现，这样子类型可以从这个缺省实现进行扩展，而不必从原有接口进行扩展。作为适配器模式的一个特例，缺省是适配模式在JAVA语言中有着特殊的应用。 参考 《JAVA与模式》之适配器模式 （八）适配器模式详解 设计模式学习笔记-适配器模式 外观（Facade）模式场景外观模式也成门面模式，其主要意图就是为若干个子系统提供一个简单的访问接口，便于功能使用，降低系统的复杂度。常用的工具包就是基于外观模式构建的。 说明 外观模式的概念在实际编码中运用的很多，在日常项目中，不同的业务模块都会有自己的子模块，子模块有不同的业务功能，模块对外开放的功能是各个子模块的功能总和，这样该模块就需要有一个外观类，通常意义上来说就是对外接口类。 外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，但可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。 合成（Composite）模式场景 想要表示对象的部分-整体层次结构。 想要客户端忽略组合对象与单个对象的差异，客户端将统一地使用组合结构中的所有对象。 合成模式的意图是为了保证客户端调用单对象与组合对象的一致性，避免程序的复杂度。 合成模式中的递归行为在合成模式中，合成超类中多数操作都是递归实现的。 组合、树、环对象间有引用，才能给称作为对象组合。对象模式是有向图，每个对象的引用都会有方向。满足如下描述的有向图也可称为树： 存在一个没有任何引用指向自身的节点； 其他每个节点都只有一个引用该节点的父节点。 含有环的合成模式环的影响桥接（Bridge）模式场景桥接模式的意图是将抽象与抽象方法的实现相互分离来实现解耦，以便二者可以相互独立地变化。在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化，那么如何应对这种多维度的变化？如何利用面向对象的技术来使得该类型能够轻松的沿着多个方向进行变化，但又不引入额外的复杂度？这就要使用桥接模式。 从抽象到桥接当子类功能有重复但实现方式不同的功能，就需要进行共有功能抽象到抽象类中；再次有另一个维度的功能需要抽象，则需要引入桥接模式，将该维度的抽象到接口中，经常称作为驱动器。 数据库驱动驱动程序的实现是个典型的桥接模式范例。JDBC是在SQL操作层面的抽象，而各种数据库驱动是在数据库差异操作层面的抽象。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://cavenzep.github.io/categories/读书笔记/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://cavenzep.github.io/tags/Java/"},{"name":"Java与设计模式","slug":"Java与设计模式","permalink":"http://cavenzep.github.io/tags/Java与设计模式/"}]},{"title":"Java与设计模式-00绪论","slug":"Java与设计模式-00绪论","date":"2017-03-16T12:56:39.000Z","updated":"2018-10-05T17:30:14.000Z","comments":true,"path":"2017/03/16/Java与设计模式-00绪论/","link":"","permalink":"http://cavenzep.github.io/2017/03/16/Java与设计模式-00绪论/","excerpt":"模式是思想的体现，非具体的实现设计模式，本来是没有的，只是在实际编码中积累的最佳实践，最终总结形成这种文档（软件社区的智慧结晶）。目的在于运用类与方法的关系来更为简便的表达需求（在面向对象的语言中），这就是我们为什么需要使用设计模式的原因。","text":"模式是思想的体现，非具体的实现设计模式，本来是没有的，只是在实际编码中积累的最佳实践，最终总结形成这种文档（软件社区的智慧结晶）。目的在于运用类与方法的关系来更为简便的表达需求（在面向对象的语言中），这就是我们为什么需要使用设计模式的原因。 设计模式分类按照意图可进行如下分类：| 意图 | 模式 || — | :– || 接口型模式 | 适配器模式、外观模式、合成模式、桥接模式 || 职责型模式 | 单例模式、观察者模式、调停着模式、代理模式、职责链模式、享元模式 || 构造型模式 | 构造者模式、工厂方法模式、抽象工厂模式、原型模式、备忘录模式 || 操作型模式 | 模板方法模式、状态模式、策略模式、命令模式、解释器模式 || 扩展型模式 | 装饰器模式、迭代器模式、访问模式 | UML在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)。常用的UML工具有StarUML。 参考： UML类图几种关系的总结","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://cavenzep.github.io/categories/读书笔记/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://cavenzep.github.io/tags/Java/"},{"name":"Java与设计模式","slug":"Java与设计模式","permalink":"http://cavenzep.github.io/tags/Java与设计模式/"}]}]}